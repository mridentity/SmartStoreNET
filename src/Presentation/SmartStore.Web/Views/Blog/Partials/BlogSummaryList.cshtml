@model BlogPostListModel
@using SmartStore.Web.Models.Blogs;

@if (Model.BlogPosts.Count == 0)
{
    return;
}

@foreach (var item in Model.BlogPosts)
{
    var imageUrl = item.PreviewPictureModel.ImageUrl;
    var itemHasImage = item.PreviewPictureModel.ImageUrl.HasValue();
    var itemHasBgImage = item.HasBgImage && itemHasImage;
    var articleClass = "card rounded shadow-sm border-0 box-img-top{0}{1}{2}{3}".FormatWith(
        itemHasBgImage ? " bg-tint-3 has-image-bg" : "",
        item.SectionBg.HasValue() ? " has-section-bg section-" + item.SectionBg : "",
        item.Tags.Count > 0 && item.DisplayTagsInPreview ? " has-tags" : "",
        itemHasImage ? " has-image" : ""
    );

    <article class="@articleClass" itemscope itemtype="http://schema.org/BlogPosting">

        @if (itemHasBgImage)
        {
            @RenderTags(item, false)
            @RenderComments(item)

            <div class="box-img-wrapper card-img">
                <img class="card-img box-scale" src="@imageUrl" alt="@item.PreviewPictureModel.AlternateText" title="@item.PreviewPictureModel.Title" itemprop="image">
            </div>
            <div class="bg-overlay bg-@(item.SectionBg) card-img"></div>
            <div class="bg-overlay bg-shade bg-shade-@(item.SectionBg) card-img h-50"></div>
        }
        else if (!item.SectionBg.HasValue() && itemHasImage)
        {
            <div class="box-img-wrapper">

                <a href="@Url.RouteUrl("BlogPost", new { SeName = item.SeName })">
                    <img class="box-img box-scale" src="@imageUrl" alt="@item.PreviewPictureModel.AlternateText" title="@item.PreviewPictureModel.Title" itemprop="image">
                </a>

                @RenderTags(item, true)
                @RenderComments(item)
            </div>
        }
        else
        {
            @RenderTags(item, false)
            @RenderComments(item)
        }

        <div class="@(itemHasBgImage ? "card-img-overlay d-flex flex-column justify-content-end" : "box-img-top")">

            <div class="blogpost-text text-left w-100 p-4">
                <div class="blogpost-date mb-2 text-muted" itemprop="dateCreated">
                    @item.CreatedOn.ToNativeString("dd MMMM, yyyy")
                </div>

                <h3 class="fs-h6 mb-3 mt-1 font-weight-medium">
                    <a href="@Url.RouteUrl("BlogPost", new { SeName = item.SeName })" class="blogpost-title" itemprop="headline">
                        @item.Title
                    </a>
                </h3>

                @if (item.Intro.HasValue())
                {
                    <div class="py-1 blogpost-intro" itemprop="description">@Html.Raw(item.Intro)</div>
                }

                @{ Html.RenderWidget("bloglist_page_inside_post"); }

            </div>
        </div>

    </article>
}

@helper RenderTags(BlogPostModel item, bool hasBgImage)
{
    if (item.Tags.Count > 0 && item.DisplayTagsInPreview)
    {
        <div class="blogpost-tags-overlay mb-3 mb-md-0 @(hasBgImage ? "p-2" : "pb-2 pt-4 px-4")">
            @for (int i = 0, length = item.Tags.Count; i < length; i++)
            {
                var tag = item.Tags[i];
                var tagClasses = "blogpost-tag badge p-1 {0}".FormatWith(item.SectionBg.HasValue() && item.SectionBg.Equals("primary") && !item.HasBgImage ? "badge-secondary" : "badge-primary");

                <a class="@tagClasses" href="@Url.RouteUrl("BlogByTag", new { tag = tag.SeName })">@tag.Name</a>
            }
        </div>
    }
}

@helper RenderComments(BlogPostModel item)
{
    if (item.Comments.AllowComments)
    {
        <div class="comments-overlay">
            <a class="fs-xs m-2 btn btn-secondary btn-circle@(item.Comments.NumberOfComments > 0 ? " vivid" : "")"
               href="@Url.RouteUrl("BlogPost", new { SeName = item.SeName })"
               title="@string.Format(@T("Blog.CommentsLink").Text, item.Comments.NumberOfComments)">
                <span class="blogpost-comments-icon fa fa-comment-alt pr-1"></span>
                <span class="blogpost-comments-count">@item.Comments.NumberOfComments</span>
            </a>
        </div>
    }
}
