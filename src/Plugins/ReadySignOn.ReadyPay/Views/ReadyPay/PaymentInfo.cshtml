@model ReadySignOn.ReadyPay.Models.ReadyPayPaymentInfoModel
@{
    Layout = "";
}

@if (Model.CurrentPageIsBasket)
{
     <style>
        #idReadyTicket {
            vertical-align: middle;
            outline: none;
        }
        #idReadyTicket:required:invalid {
            border: 1px black dashed;
        }
    </style>

    <input id="idReadyTicket" type="text" pattern="\d*" name="ReadyTicket" placeholder="enter ReadyTicket here" required>
    <input id="idBtnReadyPay" type="image" name="ReayPayButton" src="@Url.Content(Model.SubmitButtonImageUrl)">

<script>
    
    // ----------------
    // Namespace
    // ----------------

    // expose `RS` on `window` object.
    // window.RS :: Object
    var RS = RS || {};

    // on `Document.ready()`, update model, make request, handle response
    $(function () {

        // ----------------
        // Data
        // ----------------

        RS.model = {
            "Sentinel": "@Model.Sentinel",
            "ReadyTicket": $('#idReadyTicket').val(),
            "CurrentPageIsBasket": "@Model.CurrentPageIsBasket",
            "CartSubTotal": @Model.CartSubTotal,
            "TaxTotal": @Model.TaxTotal,
            "ProductId": "@Model.ProductId",
            "SubmitButtonImageUrl": "@Model.SubmitButtonImageUrl",
            "LoaderImageUrl": "@Model.LoaderImageUrl"
        };

        // tdSubTotal :: Td
        // td containing subtotal
        const tdSubTotal = $(".cart-content #order-totals .cart-summary-subtotal td.cart-summary-value");

        // tdTaxTotal :: Td
        // td containing tax total
        const tdTaxTotal = $(".cart-content #order-totals .cart-summary-tax td.cart-summary-value");

        // inputReadyTicket :: Input[text]
        // input text field containing the ready ticket
        const inputReadyTicket = $("#idReadyTicket");

        // inputReadyPay :: Input[image]
        // button invoking ReadyPay payment
        const inputReadyPay = $('#idBtnReadyPay');

        // ----------------
        // Function
        // ----------------

        // "$5,988.30 excl tax" >>> 5988.3000
        // parseSubtotal :: String -> Float
        const parseSubTotal = (str) => {
            // nonNumeric :: RegExp
            // match: "0 - 9", "."
            const nonNumeric = /[^\d\.]+/g;
            return Number(str.replace(nonNumeric, ''));
        }

        // ----------------
        // Effect
        // ----------------

        // disable controls, show loader
        const freeze = () => {
            inputReadyTicket.prop("disabled", true);
            inputReadyPay.attr("src", RS.model.LoaderImageUrl);
            inputReadyPay.prop("disabled", true)
        }

        // does the opposite of `freeze`
        const unFreeze = () => {
            inputReadyTicket.prop("disabled", false);
            inputReadyPay.prop("disabled", false)
            inputReadyPay.attr("src", RS.model.SubmitButtonImageUrl);
        }

        // disable/enable `inputReadyPay` if `inputReadyTicket` is invalid/valid
        inputReadyTicket.on("input", (e) => {
            const el = e.target;
            if (el.validity.valid) {
                inputReadyPay.prop("disabled", false);
            }
            else {
                inputReadyPay.prop("disabled", true)
            }
        });

        // ----------------
        // Main
        // ----------------

        // disable `inputReadyPay` button on load
        inputReadyPay.prop("disabled", true)

        // make a HTTP request with updated model;
        // redirect on success
        inputReadyPay.on('click', (e) => {
            
            // supress form submission made by pressing "enter" or by mouse click
            e.preventDefault();

            // obtaining the updated values
            const modelChanged = {
                "CartSubTotal": parseSubTotal(tdSubTotal.text()),
                "TaxTotal": parseSubTotal(tdTaxTotal.text()),
                "ReadyTicket": inputReadyTicket.val()
            };

            // re-bind RS.model to the updated model
            RS.model = Object.assign(RS.model, modelChanged);

            // make a HTTP request
            $.ajax({
                type: 'POST',
                url: "@Url.Action("MiniCartReadyPayPosted","ReadyPay")",
                headers: {
                    'Content-Type': 'application/json'
                },
                contentType: false,
                processData: false,
                data: JSON.stringify(RS.model),
                beforeSend: freeze,
                success: function (response) {
                    window.location.href = "@Url.Action("Completed","Checkout", new { area = "" })";
                },
                error: function (response) {
                    console.log("///Ajax call failed.");
                    displayNotification(response.message, 'error');
                },
                complete: () => {
                    unFreeze();
                }
            });
        });


    });  
</script>

}
